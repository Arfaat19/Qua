import json
import os

import numpy as np
import math
import matplotlib.pyplot as plt
import vrplib as cvrplib

import skfuzzy as fuzz
# import taichi as ti

instance=cvrplib.download_instance("A-n80-k10", "A-n80-k10.vrp")
instance = cvrplib.read_instance("A-n80-k10.vrp")


# 1. CALCULATE DISTANCES
#Access the edge weights from the dictionary
precalculated_distances = instance['edge_weight']
distances = [distance for distance in precalculated_distances]


# 2. GET NO. OF TRUCKS
trucks = instance['name'].partition("k")[2]
k=int(trucks)

# 3. GET CAPACITY OF TRUCKS
# # Access the capacity from the dictionary
capacity = instance['capacity']


# 4. GET THE CUSTOMER COORDINATES
given_coords=instance['node_coord']
coords_original = [coordinates for coordinates in given_coords]
flat_coords = [item for sublist in coords_original for item in sublist]

# Pairing up elements from flat_coords
paired_coords = [(flat_coords[i], flat_coords[i + 1]) for i in range(0, len(flat_coords), 2)]


# 5. GET DEPOT COORDINATES
depot = paired_coords[0]


# 6. GET DEMAND
given_demands=instance['demand']
demands = [demand for demand in given_demands]



# ******** ccp goes in here ********
WSS = []
n_clusters = 0
n_clusters_list = list(range(k, 2 * k + 1))
n_clusters_list

for i in range(len(n_clusters_list)):
  n_clusters = n_clusters_list[i]
  # print(n_clusters)
  coords = list(coords_original)

  for c in range(n_clusters - 1):
    coords.insert(0, depot)

  coords = np.array(coords)

  # Apply fuzzy c-means clustering
  cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(
      coords.T, n_clusters, 2, error=0.005, maxiter=1000, init=None
  )
  
  # Predict cluster membership for each data point
  cluster_membership = np.argmax(u, axis=0)
  
  WSS.append(0)

  for node in range(len(cluster_membership)):
    dist = math.dist(coords[node], cntr[cluster_membership[node]])
    WSS[i] += dist

print(u)